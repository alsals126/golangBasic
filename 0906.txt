- 프로그램은 main패키지에서 실행을 시작한다.

- fmt 패키지
	- fmt.Sprint() : 값을 문자열로 만든다.
	- fmt.Printf() : 문자열에서 형식을 지정하여 문자열을 출력한다.
- math 패키지
	- math.Sqrt() : 제곱근
	- math.Pow() : 지수 함수 ( ex) 2의 3승 )
- math/rand 패키지
	- rand.Intn : 같은 숫자를 반환함. ex) Intn(10) → 0<=n<100 사이의 랜덤 int형 n을 반환
- runtime 패키지
	- runtime.GOOS : 운영체제를 확인할 때 사용한다.
- time 패키지
	- time.Now() : 리턴타입(time.Time) / 현재시각
	- time.Now().Hour() : 리턴타입(int)  
	- time.Now().Weekday() : 리턴타입(time.Weekday) 
			      : ex) 오늘이 월요일이면, 출력값은 Monday가 나온다.
	- time.요일 : 리턴타입(time.Weekday) 
		   : ex) time.Saturday

- 대문자로 시작하는 이름이 export됨

- func 함수명(매개변수) 반환형
  ex) func add(x int, y int) int
	→ 변수 이름 뒤에 type이 온다. ex) x int
	→ 'x int, y int'를 'x, y int'로 줄일 수 있다.
	→ 반환값에 이름이 정해질 수 있다. 긴 코드에서는 가독성을 떨어뜨린다. 
		→ naked return문: 인자가 없는 return문은 이름이 주어진 반환값을 반환함

- var문은 package나 함수 단에 존재할 수 있다. (단, := 구문은 함수 밖에서 사용할 수 없다)
- 상수 : const키워드와 함께 선언. ( := 구문을 통해 선언될 수 없다)
  ex) const Pi = 3.14

- Zero values 
  bool의 기본값은 false
  int의 기본값은 0
  string의 기본값은 ""(빈 문자열)
  pointer의 기본값은 nil

- 초깃값이 존재한다면, type은 생략 가능
  type이 정해지지 않은 숫자 상수가 올 때, int/float64/complex128이 된다.
  ex) v := 42 (int)
      v := 42.1234 (float64)
      v := 42.1234i (complex128)

- T(v) : v라는 값을 T type으로 변환해준다.
- Go는 다른 type의 요소들 간의 할당에는 명시적인 변환이 필요하다. (하지 않으면, 오류발생)
  ex) var i int = 42			[ i := 42 ]
      var f float64 = float64(i)		[ f := float64(i) ]

- for문의 세 가지 구성 요소(초기화, 조건, 증감문)를 감싸는 괄호가 없고, {}괄호가 항상 필수
  ex) for i := 0; i < 10; i++ {}
- 초기화 구문과 사후 구문은 필수가 아님
  ex) for; sum<1000; {}
- Go의 While문 ( ;을 생략한다 )
  ex) for sum < 1000{}
- 무한루프 (반복조건을 생략한다)
  ex) for{}

- if문 : {}괄호 항상 필수
  ex) if x<0 {}
- if문도 조건문 전에 수행될 짧은 구문으로 시작할 수 있다.
  ex) if v := math.Pow(x,n); v<lim{}
      => v는 if문 안에서만 사용할 수 있다.

- switch문 (다른 언어와의 차이점)
  - 자동으로 break가 제공된다
  - switch case는 상수일 필요가 없으며, 그 값들은 정수일 필요도 없다.
  - 조건이 없는 Switch는 switch true와 동일하다
    ex) switch {} (= switch true{})

- defer문 : 자신을 둘러싼 함수가 종료할 때까지 실행 연기
  ex) defer fmt.Println("world")
       fmt.Print("hello ")
       결과값 : hello world
  - defer문으로 연기된 함수 호출들은 스택에 쌓인다. 한 함수가 종료될 때 후입선출 순서로 실행된다.

- Pointers(포인터)
  - *T타입은 T값을 가리키는 포인터
    ex) var p *int
  - & 연산자 : 피연산자에 대한 포인터 생성
    ex) i := 42
        p = &i
  - * 연산자: 포인터가 가리키는 주소의 값
    ex) *p = 21 //포인터 p를 통해 i 설정
- C언어와는 다르게, Go는 포인터 산술을 지원하지 않는다.

- Structs(구조체) : 필드의 집합체
  ex) type Vertex struct{
	X int
	Y int
      }
- 구조체의 필드 접근 : .(dot)
- ex) &Vertex{1,2} : 구조체 값으로 포인터를 반환한다.
                       : 타입은 *main.Vertex 

- Slices(슬라이스) : 배열의 요소들을 동적인 크기로 유연하게 볼 수 있다.
  - []T타입은 T타입을 원소로 가지는 슬라이스
    ex) var a []int //슬라이스 변수 선언 : 배열을 선언하듯이 하지만, 크기는 지정하지 않는다.
- 'a := names[0:2]'처럼 names의 배열을 참조하는 슬라이스가 있다.
  'a[0] = "min"'으로 바꾸면 names의 해당 요소도 수정이 된다. 마찬가지로 names배열의 값을 변경하게 되면, 슬라이스도 수정이 된다. 
  => 기본 배열의 한 영역을 나타내기 때문에
- 아래 슬라이스 표현식들은 동일한 의미 
  a[0:10]
  a[:10]
  a[0:]
  a[:]
- 
	
